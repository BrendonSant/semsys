// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Customer {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  phone     String
  email     String
  address   String?
  document  String
  create_at DateTime? @default(now())
  update_at DateTime? @default(now())

  userId String? @db.ObjectId
  user   User?   @relation(fields: [userId], references: [id])

  tickets Ticket[]
}

model Ticket {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  description  String
  payment      String
  status       String
  create_at    DateTime? @default(now())
  update_at    DateTime? @default(now())
  serviceprice String
  total        String
  

  customerId String?   @db.ObjectId
  customer   Customer? @relation(fields: [customerId], references: [id])

  supplierId String?   @db.ObjectId
  supplier   Supplier? @relation(fields: [supplierId], references: [id])

  productId String?  @db.ObjectId
  product   Product? @relation(fields: [productId], references: [id])

  userId String? @db.ObjectId
  user   User?   @relation(fields: [userId], references: [id])
}

model Supplier {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  phone     String
  email     String
  document  String
  address   String?
  create_at DateTime? @default(now())
  update_at DateTime? @default(now())

  tickets Ticket[]
}

model Product {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  price String
  

  tickets Ticket[]
}

//----------------------------------------------------------------------------------
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique @map("session_token")
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?    @unique
  emailVerified DateTime?  @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  tickets       Ticket[]
  customers     Customer[]
}

model VerificationToken {
  identifier String   @id @default(auto()) @map("_id") @db.ObjectId
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

//-------------------------------------------------------
